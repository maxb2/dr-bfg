diff --git a/node_modules/gqtx/.DS_Store b/node_modules/gqtx/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/node_modules/gqtx/.DS_Store differ
diff --git a/node_modules/gqtx/dist/build.js b/node_modules/gqtx/dist/build.js
index daccdc7..c8c768c 100644
--- a/node_modules/gqtx/dist/build.js
+++ b/node_modules/gqtx/dist/build.js
@@ -1,20 +1,35 @@
 "use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
 var __importStar = (this && this.__importStar) || function (mod) {
     if (mod && mod.__esModule) return mod;
     var result = {};
-    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
-    result["default"] = mod;
+    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
     return result;
 };
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.toGraphQOutputType = exports.toGraphQLInputType = exports.toGraphQLSubscriptionObject = exports.toGraphQLArgs = exports.buildGraphQLSchema = void 0;
 const graphql = __importStar(require("graphql"));
 function buildGraphQLSchema(schema) {
+    var _a;
     const typeMap = new Map();
     return new graphql.GraphQLSchema({
         query: toGraphQOutputType(schema.query, typeMap),
         mutation: schema.mutation &&
             toGraphQOutputType(schema.mutation, typeMap),
         subscription: schema.subscription && toGraphQLSubscriptionObject(schema.subscription, typeMap),
+        types: (_a = schema.types) === null || _a === void 0 ? void 0 : _a.map((type) => toGraphQOutputType(type, typeMap))
     });
 }
 exports.buildGraphQLSchema = buildGraphQLSchema;
diff --git a/node_modules/gqtx/dist/define.d.ts b/node_modules/gqtx/dist/define.d.ts
index a51eb1f..2147714 100644
--- a/node_modules/gqtx/dist/define.d.ts
+++ b/node_modules/gqtx/dist/define.d.ts
@@ -5,13 +5,19 @@ export declare function createTypesFactory<Ctx = undefined>(): {
     Int: Scalar<number | null>;
     Float: Scalar<number | null>;
     Boolean: Scalar<boolean | null>;
-    ID: Scalar<any>;
+    ID: {
+        kind: "Scalar";
+        builtInType: graphql.GraphQLScalarType;
+    } | {
+        kind: "Scalar";
+        graphqlTypeConfig: graphql.GraphQLScalarTypeConfig<any, JSON>;
+    };
     IDString: Scalar<string | null>;
     IDInt: Scalar<number | null>;
     scalarType<Src>({ name, description, serialize, parseValue, parseLiteral, }: {
         name: string;
         description?: string | undefined;
-        serialize: (src: Src) => any;
+        serialize: (src: Src) => any | null;
         parseValue?: ((value: JSON) => Src | null) | undefined;
         parseLiteral?: ((value: graphql.ValueNode) => Src | null) | undefined;
     }): Scalar<Src | null>;
@@ -51,13 +57,13 @@ export declare function createTypesFactory<Ctx = undefined>(): {
     }): InputObject<Src_7 | null>;
     unionType<Src_8>({ name, types, resolveType, }: {
         name: string;
-        types: ObjectType<Ctx, any>[];
+        types: Array<ObjectType<Ctx, any>>;
         resolveType: (src: Src_8) => ObjectType<any, any>;
     }): Union<Ctx, Src_8 | null>;
     interfaceType<Src_9>({ name, description, fields, }: {
         name: string;
         description?: string | undefined;
-        fields: (self: Interface<Ctx, Src_9 | null>) => AbstractField<Ctx, any>[];
+        fields: (self: Interface<Ctx, Src_9 | null>) => Array<AbstractField<Ctx, any>>;
     }): Interface<Ctx, Src_9 | null>;
     List<Src_10>(ofType: OutputType<Ctx, Src_10>): OutputType<Ctx, Src_10[] | null>;
     ListInput<Src_11>(ofType: InputType<Src_11>): InputType<Src_11[] | null>;
diff --git a/node_modules/gqtx/dist/define.js b/node_modules/gqtx/dist/define.js
index d4fb21c..9a06f39 100644
--- a/node_modules/gqtx/dist/define.js
+++ b/node_modules/gqtx/dist/define.js
@@ -1,12 +1,25 @@
 "use strict";
+var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
+}) : (function(o, m, k, k2) {
+    if (k2 === undefined) k2 = k;
+    o[k2] = m[k];
+}));
+var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
+    Object.defineProperty(o, "default", { enumerable: true, value: v });
+}) : function(o, v) {
+    o["default"] = v;
+});
 var __importStar = (this && this.__importStar) || function (mod) {
     if (mod && mod.__esModule) return mod;
     var result = {};
-    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
-    result["default"] = mod;
+    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
+    __setModuleDefault(result, mod);
     return result;
 };
 Object.defineProperty(exports, "__esModule", { value: true });
+exports.createTypesFactory = void 0;
 const graphql = __importStar(require("graphql"));
 function builtInScalar(builtInType) {
     return {
diff --git a/node_modules/gqtx/dist/index.js b/node_modules/gqtx/dist/index.js
index 8b9ccf2..aedd766 100644
--- a/node_modules/gqtx/dist/index.js
+++ b/node_modules/gqtx/dist/index.js
@@ -1,8 +1,8 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 var define_1 = require("./define");
-exports.createTypesFactory = define_1.createTypesFactory;
+Object.defineProperty(exports, "createTypesFactory", { enumerable: true, get: function () { return define_1.createTypesFactory; } });
 var build_1 = require("./build");
-exports.buildGraphQLSchema = build_1.buildGraphQLSchema;
-exports.toGraphQLInputType = build_1.toGraphQLInputType;
-exports.toGraphQOutputType = build_1.toGraphQOutputType;
+Object.defineProperty(exports, "buildGraphQLSchema", { enumerable: true, get: function () { return build_1.buildGraphQLSchema; } });
+Object.defineProperty(exports, "toGraphQLInputType", { enumerable: true, get: function () { return build_1.toGraphQLInputType; } });
+Object.defineProperty(exports, "toGraphQOutputType", { enumerable: true, get: function () { return build_1.toGraphQOutputType; } });
diff --git a/node_modules/gqtx/dist/types.d.ts b/node_modules/gqtx/dist/types.d.ts
index 89ece18..7689443 100644
--- a/node_modules/gqtx/dist/types.d.ts
+++ b/node_modules/gqtx/dist/types.d.ts
@@ -135,5 +135,6 @@ export declare type Schema<Ctx, RootSrc = undefined> = {
     query: ObjectType<Ctx, RootSrc>;
     mutation?: ObjectType<Ctx, RootSrc>;
     subscription?: SubscriptionObject<Ctx, RootSrc>;
+    types?: ObjectType<Ctx, any>[];
 };
 export {};
