diff --git a/node_modules/react-showdown/dist/MarkdownView.d.ts b/node_modules/react-showdown/dist/MarkdownView.d.ts
index 7d813b0..f04705f 100644
--- a/node_modules/react-showdown/dist/MarkdownView.d.ts
+++ b/node_modules/react-showdown/dist/MarkdownView.d.ts
@@ -8,5 +8,6 @@ export interface MarkdownViewProps {
     options?: ConverterOptions;
     extensions?: ShowdownExtension[];
     components?: Record<string, ClassType<never, never, never> | FunctionComponent<any>>;
+    MONKEY_PATCHED_textMapper?: (textContent: string) => React.ReactNode;
 }
 export default function MarkdownView(props: MarkdownViewProps): ReactElement;
diff --git a/node_modules/react-showdown/dist/react-showdown.cjs.development.js b/node_modules/react-showdown/dist/react-showdown.cjs.development.js
index 98069af..30b2632 100644
--- a/node_modules/react-showdown/dist/react-showdown.cjs.development.js
+++ b/node_modules/react-showdown/dist/react-showdown.cjs.development.js
@@ -88,7 +88,8 @@ function MarkdownView(props) {
       options = props.options,
       extensions = props.extensions,
       components = props.components,
-      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components"]);
+      MONKEY_PATCHED_textMapper = props.MONKEY_PATCHED_textMapper,
+      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "MONKEY_PATCHED_textMapper"]);
 
   var mapElement = React.useMemo(function () {
     return function mapElement(node, index) {
@@ -129,7 +130,7 @@ function MarkdownView(props) {
         var children = skipAnyChildrenFor.includes(node.name) ? null : skipWhitespaceElementsFor.includes(node.name) ? node.children.filter(filterWhitespaceElements).map(mapElement) : node.children.map(mapElement);
         return React.createElement(elementType, _props, children);
       } else if (node.type === 'text' && node instanceof domhandler.DataNode) {
-        return node.data;
+        return MONKEY_PATCHED_textMapper ? MONKEY_PATCHED_textMapper(node.data) : node.data;
       } else if (node.type === 'comment') {
         return null; // noop
       } else if (node.type === 'style' && node instanceof domhandler.Element) {
diff --git a/node_modules/react-showdown/dist/react-showdown.esm.js b/node_modules/react-showdown/dist/react-showdown.esm.js
index ef5e9c6..48867cb 100644
--- a/node_modules/react-showdown/dist/react-showdown.esm.js
+++ b/node_modules/react-showdown/dist/react-showdown.esm.js
@@ -81,7 +81,8 @@ function MarkdownView(props) {
       options = props.options,
       extensions = props.extensions,
       components = props.components,
-      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components"]);
+      MONKEY_PATCHED_textMapper = props.MONKEY_PATCHED_textMapper,
+      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "MONKEY_PATCHED_textMapper"]);
 
   var mapElement = useMemo(function () {
     return function mapElement(node, index) {
@@ -122,7 +123,7 @@ function MarkdownView(props) {
         var children = skipAnyChildrenFor.includes(node.name) ? null : skipWhitespaceElementsFor.includes(node.name) ? node.children.filter(filterWhitespaceElements).map(mapElement) : node.children.map(mapElement);
         return createElement(elementType, _props, children);
       } else if (node.type === 'text' && node instanceof DataNode) {
-        return node.data;
+        return MONKEY_PATCHED_textMapper ? MONKEY_PATCHED_textMapper(node.data) : node.data;
       } else if (node.type === 'comment') {
         return null; // noop
       } else if (node.type === 'style' && node instanceof Element) {
@@ -188,7 +189,8 @@ function MarkdownView(props) {
     // Don't change the attribute names so that stuff like `className` works correctly.
     lowerCaseAttributeNames: false,
     // Encode entities automatically, so that &copy; and &uuml; works correctly.
-    decodeEntities: true
+    decodeEntities: true,
+    recognizeSelfClosing: true
   });
   return createElement('div', otherProps, root.map(mapElement));
 } // Match react-dom omittedCloseTags. See also:
