diff --git a/node_modules/react-showdown/dist/MarkdownView.d.ts b/node_modules/react-showdown/dist/MarkdownView.d.ts
index 2f6d0a6..1901935 100644
--- a/node_modules/react-showdown/dist/MarkdownView.d.ts
+++ b/node_modules/react-showdown/dist/MarkdownView.d.ts
@@ -9,5 +9,6 @@ export interface MarkdownViewProps {
     options?: ConverterOptions;
     extensions?: ShowdownExtension[];
     components?: Record<string, ClassType<never, never, never> | FunctionComponent<any>>;
+    MONKEY_PATCHED_textMapper?: (textContent: string) => React.ReactNode;
 }
 export default function MarkdownView(props: MarkdownViewProps): ReactElement;
diff --git a/node_modules/react-showdown/dist/react-showdown.cjs.development.js b/node_modules/react-showdown/dist/react-showdown.cjs.development.js
index 0e2ad0c..83b7f1a 100644
--- a/node_modules/react-showdown/dist/react-showdown.cjs.development.js
+++ b/node_modules/react-showdown/dist/react-showdown.cjs.development.js
@@ -94,7 +94,8 @@ function MarkdownView(props) {
       extensions = props.extensions,
       components = props.components,
       sanitizeHtml = props.sanitizeHtml,
-      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "sanitizeHtml"]);
+      MONKEY_PATCHED_textMapper = props.MONKEY_PATCHED_textWrapper,
+      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "sanitizeHtml", "MONKEY_PATCHED_textWrapper"]);
 
   var mapElement = React.useMemo(function () {
     return function mapElement(node, index) {
@@ -135,7 +136,7 @@ function MarkdownView(props) {
         var children = skipAnyChildrenFor.includes(node.name) ? null : skipWhitespaceElementsFor.includes(node.name) ? node.children.filter(filterWhitespaceElements).map(mapElement) : node.children.map(mapElement);
         return React.createElement(elementType, _props, children);
       } else if (node.type === 'text' && node instanceof domhandler.DataNode) {
-        return node.data;
+        return MONKEY_PATCHED_textMapper ? MONKEY_PATCHED_textMapper(node.data) : node.data;
       } else if (node.type === 'comment') {
         return null; // noop
       } else if (node.type === 'style' && node instanceof domhandler.Element) {
diff --git a/node_modules/react-showdown/dist/react-showdown.esm.js b/node_modules/react-showdown/dist/react-showdown.esm.js
index bd50467..bee7730 100644
--- a/node_modules/react-showdown/dist/react-showdown.esm.js
+++ b/node_modules/react-showdown/dist/react-showdown.esm.js
@@ -87,7 +87,8 @@ function MarkdownView(props) {
       extensions = props.extensions,
       components = props.components,
       sanitizeHtml = props.sanitizeHtml,
-      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "sanitizeHtml"]);
+      MONKEY_PATCHED_textMapper = props.MONKEY_PATCHED_textMapper,
+      otherProps = _objectWithoutPropertiesLoose(props, ["dangerouslySetInnerHTML", "flavor", "markdown", "markup", "options", "extensions", "components", "sanitizeHtml", "MONKEY_PATCHED_textMapper"]);
 
   var mapElement = useMemo(function () {
     return function mapElement(node, index) {
@@ -128,7 +129,7 @@ function MarkdownView(props) {
         var children = skipAnyChildrenFor.includes(node.name) ? null : skipWhitespaceElementsFor.includes(node.name) ? node.children.filter(filterWhitespaceElements).map(mapElement) : node.children.map(mapElement);
         return createElement(elementType, _props, children);
       } else if (node.type === 'text' && node instanceof DataNode) {
-        return node.data;
+        return MONKEY_PATCHED_textMapper ? MONKEY_PATCHED_textMapper(node.data) : node.data;
       } else if (node.type === 'comment') {
         return null; // noop
       } else if (node.type === 'style' && node instanceof Element) {
