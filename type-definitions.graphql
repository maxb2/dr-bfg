### THIS FILE IS AUTO GENERATED

type ChatMessage {
  id: ID!
  authorName: String!
  content: [ChatMessageNode!]!
  createdAt: String!
}

type ChatMessageConnection {
  edges: [ChatMessageEdge!]!
  pageInfo: PageInfo!
}

input ChatMessageCreateInput {
  rawContent: String!
  authorName: String!
}

type ChatMessageDiceRollNode {
  content: DiceRoll!
}

type ChatMessageEdge {
  cursor: String!
  node: ChatMessage!
}

union ChatMessageNode = ChatMessageDiceRollNode | ChatMessageTextNode

type ChatMessagesAddedSubscription {
  messages: [ChatMessage!]!
}

type ChatMessageTextNode {
  content: String!
}

type DiceRoll {
  result: Float!
  detail: [DiceRollDetail!]!
}

type DiceRollCloseParenNode {
  content: String!
}

type DiceRollConstantNode {
  content: String!
}

union DiceRollDetail = DiceRollOperatorNode | DiceRollConstantNode | DiceRollDiceRollNode | DiceRollOpenParenNode | DiceRollCloseParenNode

type DiceRollDiceRollNode {
  content: String!
  min: Float!
  max: Float!
  rollResults: [Float!]!
}

type DiceRollOpenParenNode {
  content: String!
}

type DiceRollOperatorNode {
  content: String!
}

type Mutation {
  chatMessageCreate(input: ChatMessageCreateInput!): Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Query {
  chat(first: Int, after: ID): ChatMessageConnection!
}

type Subscription {
  chatMessagesAdded: ChatMessagesAddedSubscription!
}
